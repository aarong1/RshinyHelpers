rowwise()%>%
#-----------
# important as that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c({{to}},{{from}})))
y <-  map(x$to_from,sort)%>% #sort alphabetically
as.data.frame()%>% #prep for transpose
t()%>% #transpose
as.data.frame() #coerce back to data.frame- doesn't also preserve df
names(y) <- c('to_ordered','from_ordered')
orderedxy <- cbind(x,y)%>%
rownames_to_column(var='rn')%>%
select(-rn)
#we can then get the ordered fields and count them
orderedxy <- orderedxy%>%
group_by(to_ordered,from_ordered)%>%#,label
add_count()%>%
filter(n>1)%>%
select(-c(n,to_ordered,from_ordered,to_from))
return(orderedxy)
}
similar_permutations(edges,to,from)
similar_permutations <- function(edges, to, from) {
x <- edges%>%
rowwise()%>%
#-----------
# important as that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c({{to}},{{from}})))
y <-  map(x$to_from,sort)%>% #sort alphabetically
as.data.frame()%>% #prep for transpose
t()%>% #transpose
as.data.frame() #coerce back to data.frame- doesn't also preserve df
names(y) <- c('to_ordered','from_ordered')
orderedxy <- cbind(x,y)%>%
rownames_to_column(var='rn')%>%
select(-rn)
#we can then get the ordered fields and count them
orderedxy <- orderedxy%>%
group_by(to_ordered,from_ordered)%>%#,label
add_count()%>%
filter(n>1)%>%
ungroup()%>%
select(-c(n,to_ordered,from_ordered,to_from))
return(orderedxy)
}
similar_permutations(edges,to,from)
?Rprofile
old <- getOption("defaultPackages");
options(defaultPackages = c(old, "devtools",'usethis'))
old
library(devtools)
load_all()
rm(list = c("collapse_rows", "forCur", "forCurArea", "forCurAreaGBP", "forCurGBP", "four_value", "similar_permutations"))
load_all()
?t()
load_all()
check()
document()
document()
check()
use_package('dplyr')
use_package('tibble')
use_package('ggplot2')
use_package('tm')
use_package('tidyr')
check()
use_package(('sparklines')
use_package('sparklines')
shiny::runApp('~/Documents/finance_value_box')
check()
use_package('shiny')
use_package('tidy_eval')
use_package('purrr')
use_package('tidyverse')
check()
check()
check()
check()
require(dplyr)
print(require(dplyr))
library(dplyr)
library(dplyr)
check()
check()
check()
document()
install()
?DT_hover_row_colour
?DT_selected_row_colour
?four_value
text=c('BTC','ETH','DOG','KLI')
values=c('$3,034','$4,353','$496','$629')
four_value(text,values)
htmltools::HTML(text=c('BTC','ETH','DOG','KLI')
values=c('$3,034','$4,353','$496','$629')
four_value(text,values))
htmltools::HTML(text=c('BTC','ETH','DOG','KLI')
values=c('$3,034','$4,353','$496','$629')
four_value(text,values))
htmltools::HTML(
four_value(text,values))
class(four_value(text,values))
htmltools::HTML(as.character(four_value(text,values)))
htmltools::HTML(as.character(four_value(text,values)))
?numeric_format
?forCur
?forCurArea
?similar_permutations
build()
check()
geo_read <- function(filename = "LGD_2012.geojson") {
#' Paste two items
#'
#' @description This function pastes two items
#' together.
#'
#' By using the description tag you'll notice that I
#' can have multiple paragraphs in the description section
#'
#' @param x character. The first item to paste
#' @param y character. The second item to paste Defaults to "!" but
#' "?" would be pretty great too
#' @usage mypaste(x, y)
#' @return The inputs pasted together as a character string.
#' @details The inputs can be anything that can be input into
#' the paste function.
#' @note And here is a note. Isn't it nice?
#' @section I Must Warn You:
#' The reference provided is a good read.
#' \subsection{Other warning}{
#'   It is completely irrelevant to this function though.
#' }
#'
#' @references Tufte, E. R. (2001). The visual display of
#' quantitative information. Cheshire, Conn: Graphics Press.
#' @examples
#' mypaste(1, 3)
#' mypaste("hey", "you")
#' mypaste("single param")
#' @export
#' @importFrom sf st_read
shape <- sf::st_read(filename)
return(shape)
}
x <- sf::st_read('OSNI')
ggplot(x)+geom_sf()
# time series
ts <-  as_date("2021-10-03"):as_date(Sys.Date())
ts <- sort(as_date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]
ts
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts
as.Date("2021-10-03")
numeric(as.Date("2021-10-03"))
(as.Date.numeric("2021-10-03")
)
as.Date.numeric("2021-10-03")
as.Date.numeric(as.Date("2021-10-03"))
as.Date.numeric(as.Date("2021-10-03"),origin='01-01-1970')
as.Date(as.Date("2021-10-03"),origin='01-01-1970')
as.Date("2021-10-03",origin='01-01-1970')
as.Date(19071,origin='01-01-1970')
as.Date(19071,origin='1970-01-01')
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],,origin='1970-01-01'))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],origin='1970-01-01'))
ts
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
length(ts)*n_distinct(df$col2)
df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
time_name
gp_var <- 2
val_var <- 3
new_df <- expand.grid(as.Date(min(ts):max(ts)),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df <- expand.grid(as.Date(min(ts):max(ts)),df$col1)
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
ggplot::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time <- function(ts, df, time_name) {
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'))
complete_time <- function(ts, df, time_name) {
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
sapply(df,class)[sapply(df,class)=='Date']%>%names()
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
df[['time_name']]
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time(df)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
complete_time_factors(df)
new_df <- complete_time_factors(df)
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time_factors(df)
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
new_df
names(new_df) <- c(time_name,'col1')
new_df
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df
new_df$col2[is.na(new_df$col1)] <- 0
?expand.grid
expand.grid
new_df <- complete_time(df)
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
df
df%>%
count(time,wt=col2)
mutate(n-lag(n,2)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df
new_df <- complete_time(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
new_df <- complete_time_factors(df)
new_df
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df
new_df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
count(new_df,Var1)
names(new_df) <- c(time_name,'col1')
new_df
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
duplicated(df)
df
count(df)
count(df,time,col1,col2)
count(df,time,col1,col2)%>%arrange(desc(n))
new_df
df$col1
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,dplyr::distinct(df[c(time_name,'col1','col2')]),all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
x <- sf::st_read('OSNI')
?stats::filter
use_r(complete_time)
use_r('complete_time')
use_test()
