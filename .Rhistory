values=c('$3,034','$4,353','$496','$629')
four_value(text,values))
htmltools::HTML(text=c('BTC','ETH','DOG','KLI')
values=c('$3,034','$4,353','$496','$629')
four_value(text,values))
htmltools::HTML(
four_value(text,values))
class(four_value(text,values))
htmltools::HTML(as.character(four_value(text,values)))
htmltools::HTML(as.character(four_value(text,values)))
?numeric_format
?forCur
?forCurArea
?similar_permutations
build()
check()
geo_read <- function(filename = "LGD_2012.geojson") {
#' Paste two items
#'
#' @description This function pastes two items
#' together.
#'
#' By using the description tag you'll notice that I
#' can have multiple paragraphs in the description section
#'
#' @param x character. The first item to paste
#' @param y character. The second item to paste Defaults to "!" but
#' "?" would be pretty great too
#' @usage mypaste(x, y)
#' @return The inputs pasted together as a character string.
#' @details The inputs can be anything that can be input into
#' the paste function.
#' @note And here is a note. Isn't it nice?
#' @section I Must Warn You:
#' The reference provided is a good read.
#' \subsection{Other warning}{
#'   It is completely irrelevant to this function though.
#' }
#'
#' @references Tufte, E. R. (2001). The visual display of
#' quantitative information. Cheshire, Conn: Graphics Press.
#' @examples
#' mypaste(1, 3)
#' mypaste("hey", "you")
#' mypaste("single param")
#' @export
#' @importFrom sf st_read
shape <- sf::st_read(filename)
return(shape)
}
x <- sf::st_read('OSNI')
ggplot(x)+geom_sf()
# time series
ts <-  as_date("2021-10-03"):as_date(Sys.Date())
ts <- sort(as_date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]))
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))]
ts
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts
as.Date("2021-10-03")
numeric(as.Date("2021-10-03"))
(as.Date.numeric("2021-10-03")
)
as.Date.numeric("2021-10-03")
as.Date.numeric(as.Date("2021-10-03"))
as.Date.numeric(as.Date("2021-10-03"),origin='01-01-1970')
as.Date(as.Date("2021-10-03"),origin='01-01-1970')
as.Date("2021-10-03",origin='01-01-1970')
as.Date(19071,origin='01-01-1970')
as.Date(19071,origin='1970-01-01')
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],,origin='1970-01-01'))
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(as.Date(ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],origin='1970-01-01'))
ts
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
length(ts)*n_distinct(df$col2)
df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
time_name
gp_var <- 2
val_var <- 3
new_df <- expand.grid(as.Date(min(ts):max(ts)),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df <- expand.grid(as.Date(min(ts):max(ts)),df$col1)
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
ggplot::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time <- function(ts, df, time_name) {
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'))
complete_time <- function(ts, df, time_name) {
new_df <- expand.grid(as.Date(min(ts):max(ts),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
sapply(df,class)[sapply(df,class)=='Date']%>%names()
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
new_df <- expand.grid(as.Date(min(df[['time_name']]):max(df[['time_name']]),origin='1970-01-01'))
df[['time_name']]
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time(df)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
complete_time_factors(df)
new_df <- complete_time_factors(df)
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
complete_time_factors(df)
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
complete_time(df)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01')
new_df
names(new_df) <- c(time_name,'col1')
new_df
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name,'col1')
new_df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df
new_df$col2[is.na(new_df$col1)] <- 0
?expand.grid
expand.grid
new_df <- complete_time(df)
ggplot2::ggplot(df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
ggplot2::ggplot(new_df)+geom_line(aes(time,col2,col=col1))+facet_wrap(~col1)+theme_minimal()
df
df%>%
count(time,wt=col2)
mutate(n-lag(n,2)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df
new_df <- complete_time(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
new_df <- complete_time_factors(df)
new_df
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
# time series
ts <-  as.Date("2021-10-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df
new_df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
count(new_df,Var1)
names(new_df) <- c(time_name,'col1')
new_df
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
duplicated(df)
df
count(df)
count(df,time,col1,col2)
count(df,time,col1,col2)%>%arrange(desc(n))
new_df
df$col1
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,dplyr::distinct(df[c(time_name,'col1','col2')]),all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
x <- sf::st_read('OSNI')
?stats::filter
use_r(complete_time)
use_r('complete_time')
use_test()
check()
print(require(devtools))
cat('Welcome back to the RshinyHelpers software package /n')
cat('Welcome back to the RshinyHelpers software package \n')
cat('Welcome back to the *RshinyHelpers* software package \n')
library(crayon)
crayon::bgCyan('hello')
print(crayon::bgCyan('hello'))
cat(crayon::bgCyan('hello'))
cat(crayon::cyan('hello'))
?crayon::combine_styles(
)
crayon::combine_styles(crayon::bold,crayon::cyan)
x <- crayon::combine_styles(crayon::bold,crayon::cyan)
x('e')
cat(x('e'))
cat('Welcome back to the ' x(RshinyHelpers), ' software package \n')
x <- crayon::combine_styles(crayon::bold,crayon::cyan)
cat('Welcome back to the ' x(RshinyHelpers), ' software package \n')
cat('Welcome back to the ', x(RshinyHelpers), ' software package \n')
cat('Welcome back to the ', x('RshinyHelpers'), ' software package \n')
cat('Welcome back to the', x('RshinyHelpers'), 'software package \n')
?crayon
crayon::error('f')
x
print(x)
x
quote(x)
check()
rm(list = c("complete_time", "complete_time_factors")
)
check()
check()
use_mit_license()
check()
check()
#' ggplot_obj <-
#'      ggplot2::ggplot( mtcars) +
#'      ggplot2::facet_wrap(~am)+
#'      ggplot2::labs(title = 'Graph Title')+
#'      ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
#'
#' ggplot_obj + custom_theme()
#'
#' @import ggplot2
#' @export
custom_theme <- ggplot2::theme(
text = ggplot2::element_text(face = , hjust = 0),
title = ggplot2::element_text(size = 15,
colour = 'dimgrey'),
panel.background = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.text = ggplot2::element_text(colour = 'black', size = 8),
strip.text = ggplot2::element_text(face = 'bold.italic', size = 12),
strip.background = ggplot2::element_rect(
colour = 'black',
fill = 'white',
size = 1
),
legend.position = 'bottom',
legend.key.width = unit(0.1, units = 'npc'),
legend.key = ggplot2::element_rect(fill = NA)
)
custom_theme
if(!require(dplyr)){library(dplyr)}
#if(!require(ggplot2)){library(ggplot2)}
mtcars <- dplyr::mutate(mtcars,am=as.factor(am))
ggplot_obj <-
ggplot2::ggplot( mtcars) +
ggplot2::facet_wrap(~am)+
ggplot2::labs(title = 'Graph Title')+
ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
ggplot_obj + custom_theme()
if(!require(dplyr)){library(dplyr)}
#if(!require(ggplot2)){library(ggplot2)}
mtcars <- dplyr::mutate(mtcars,am=as.factor(am))
ggplot_obj <-
ggplot2::ggplot( mtcars) +
ggplot2::facet_wrap(~am)+
ggplot2::labs(title = 'Graph Title')+
ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
ggplot_obj + custom_theme
check()
use_pakage('htmltools')
use_pakage('htmltools')
use_package('htmltools')
check()
use_package('stringr')
check()
check()
check()
check()
check()
require(pkgdown)
build_site()
usethis::use_pkgdown_github_pages()
q()
