val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df
new_df
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.9,0.1))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(T,F),size = 101,replace = T,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
df
df <- tibble::tibble(time=as.Date(ts),
col1=sample(replace=T,letters[c(1:5)],size=length(ts)),
col2=sample(replace=T,1:26,size=length(ts)),
)
length(ts)*n_distinct(df$col2)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
gp_var <- 2
val_var <- 3
complete_time <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- as.data.frame(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'))
names(new_df) <- c(time_name)
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
new_df$col2[is.na(new_df$col1)] <- 0
return(new_df)
}
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),df$col1)
new_df
count(new_df,Var1)
names(new_df) <- c(time_name,'col1')
new_df
new_df <- merge(new_df,df[c(time_name,'col1','col2')],all.x=TRUE)
new_df
duplicated(df)
df
count(df)
count(df,time,col1,col2)
count(df,time,col1,col2)%>%arrange(desc(n))
new_df
df$col1
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
complete_time_factors <- function(df) {
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- expand.grid(as.Date(min(df[[time_name]]):max(df[[time_name]]),origin='1970-01-01'),unique(df$col1))
names(new_df) <- c(time_name,'col1')
new_df <- merge(new_df,dplyr::distinct(df[c(time_name,'col1','col2')]),all.x=TRUE)
new_df$col2[is.na(new_df$col2)] <- 0
return(new_df)
}
new_df <- complete_time_factors(df)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,2))%>%head(10)
df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
new_df%>%
count(time,wt=col2)%>%
mutate(n-lag(n,1))%>%head(10)
x <- sf::st_read('OSNI')
?stats::filter
use_r(complete_time)
use_r('complete_time')
use_test()
check()
print(require(devtools))
cat('Welcome back to the RshinyHelpers software package /n')
cat('Welcome back to the RshinyHelpers software package \n')
cat('Welcome back to the *RshinyHelpers* software package \n')
library(crayon)
crayon::bgCyan('hello')
print(crayon::bgCyan('hello'))
cat(crayon::bgCyan('hello'))
cat(crayon::cyan('hello'))
?crayon::combine_styles(
)
crayon::combine_styles(crayon::bold,crayon::cyan)
x <- crayon::combine_styles(crayon::bold,crayon::cyan)
x('e')
cat(x('e'))
cat('Welcome back to the ' x(RshinyHelpers), ' software package \n')
x <- crayon::combine_styles(crayon::bold,crayon::cyan)
cat('Welcome back to the ' x(RshinyHelpers), ' software package \n')
cat('Welcome back to the ', x(RshinyHelpers), ' software package \n')
cat('Welcome back to the ', x('RshinyHelpers'), ' software package \n')
cat('Welcome back to the', x('RshinyHelpers'), 'software package \n')
?crayon
crayon::error('f')
x
print(x)
x
quote(x)
check()
rm(list = c("complete_time", "complete_time_factors")
)
check()
check()
use_mit_license()
check()
check()
#' ggplot_obj <-
#'      ggplot2::ggplot( mtcars) +
#'      ggplot2::facet_wrap(~am)+
#'      ggplot2::labs(title = 'Graph Title')+
#'      ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
#'
#' ggplot_obj + custom_theme()
#'
#' @import ggplot2
#' @export
custom_theme <- ggplot2::theme(
text = ggplot2::element_text(face = , hjust = 0),
title = ggplot2::element_text(size = 15,
colour = 'dimgrey'),
panel.background = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.text = ggplot2::element_text(colour = 'black', size = 8),
strip.text = ggplot2::element_text(face = 'bold.italic', size = 12),
strip.background = ggplot2::element_rect(
colour = 'black',
fill = 'white',
size = 1
),
legend.position = 'bottom',
legend.key.width = unit(0.1, units = 'npc'),
legend.key = ggplot2::element_rect(fill = NA)
)
custom_theme
if(!require(dplyr)){library(dplyr)}
#if(!require(ggplot2)){library(ggplot2)}
mtcars <- dplyr::mutate(mtcars,am=as.factor(am))
ggplot_obj <-
ggplot2::ggplot( mtcars) +
ggplot2::facet_wrap(~am)+
ggplot2::labs(title = 'Graph Title')+
ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
ggplot_obj + custom_theme()
if(!require(dplyr)){library(dplyr)}
#if(!require(ggplot2)){library(ggplot2)}
mtcars <- dplyr::mutate(mtcars,am=as.factor(am))
ggplot_obj <-
ggplot2::ggplot( mtcars) +
ggplot2::facet_wrap(~am)+
ggplot2::labs(title = 'Graph Title')+
ggplot2::geom_point(ggplot2::aes(disp,mpg,col=mpg))
ggplot_obj + custom_theme
check()
use_pakage('htmltools')
use_pakage('htmltools')
use_package('htmltools')
check()
use_package('stringr')
check()
check()
check()
check()
check()
require(pkgdown)
build_site()
usethis::use_pkgdown_github_pages()
q()
check()
pkgdown::preview_site()
pkgdown::template_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
data_deps()
pkgdown::init_site()
data_deps()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
devtools::build_readme()
build_home()
build_site()
build_reference()
build_reference()
build_reference()
build_site()
build_home()
build_home()
build_readme()
buid_home()
build_home()
usethis::use_vignette("my-vignette")
usethis::use_vignette("time")
build_search()
build_site()
library(RShinyHelpers)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RShinyHelpers)
require(ggplot2)
require(dplyr)
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts)),
)
sample(replace=TRUE,letters[c(1:5)],size=length(ts))
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
require(ggplot2)
require(dplyr)
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- complete_time_factors(df)
require(ggplot2)
require(dplyr)
# time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
time_name <- sapply(df,class)[sapply(df,class)=='Date']%>%names()
new_df <- complete_time_factors(df)
build_site()
preview_site()
build_site()
build_site()
build_site()
build_home_index(); init_site()
library(bslib)
build_home_index(); init_site()
build_home_index(); init_site()
build_home()
build_home()
build_site()
build_site()
preview_site()
build_home()
install.packages('pkgdown')
install.packages("pkgdown")
build_site()
build_site()
?rmarkdown
library(RShinyHelpers)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RShinyHelpers)
library(RShinyHelpers)
RShinyHelpers::custom_theme
RShinyHelpers::custom_theme()
devtools::install_github(aarong1/Rpack)
devtools::install_github('aarong1/Rpack')
#load_all()
#library(RShinyHelpers)
library(Rpack)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#load_all()
#library(RShinyHelpers)
library(Rpack)
#load_all()
library(RShinyHelpers)
library(Rpack)
library(dgs)
library(Rpack)
library(RShinyHelpers)
require(ggplot2)
require(dplyr)
# construct a time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
#sample some dates of the original so its 'patchy'
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
#generate a corresponding factor alongside
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
kableExtra::kable(head(df,10))
#load_all()
library(RShinyHelpers)
library(Rpack)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#load_all()
library(RShinyHelpers)
library(Rpack)
require(ggplot2)
require(dplyr)
# construct a time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
#sample some dates of the original so its 'patchy'
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
#generate a corresponding factor alongside
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
kableExtra::kable(head(df,10))
new_df <- complete_time_factors(df)
new_df <- Rpack::complete_time_factors(df)
new_df <- RShinyHelpers::complete_time_factors(df)
new_df <- RShinyHelpers::complete_time_factors(df)
RShinyHelpers::complete_time_factors(df)
complete_time_factors(df)
load_all()
load_all()
new_df <- RShinyHelpers::complete_time_factors(df)
new_df <- complete_time_factors(df)
devtools::load_all()
library(RShinyHelpers)
ggplot2::ggplot(df)+
ggplot2::geom_line(ggplot2::aes(time,col2,col=col1))+
ggplot2::facet_wrap(~col1)+
custom_theme()
ggplot2::ggplot(new_df)+
ggplot2::geom_line(ggplot2::aes(time,col2,col=col1))+
ggplot2::facet_wrap(~col1)+
custom_theme()
build_articles()
use_vignette('Shiny')
df
df%>%ggplot(aes(time,col2,group=col1))
df
df%>%ggplot(aes(time,col2,group=col1))+geom_line()
df%>%ggplot(aes(time,col2,col=col1))+geom_line()
df%>%ggplot(aes(time,col2,col=col1))+geom_line()+custom_theme()
new_df%>%ggplot(aes(time,col2,col=col1))+geom_line()+custom_theme()
build_vignette()
build_articles()
shiny::runApp('testing_functions/testing_app')
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
input$bins=4
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = 4)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
runApp('testing_functions/testing_app')
faithful
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
?bootstrap_slider_colour()
runApp('testing_functions/testing_app')
1:10+runif(n=10,min=-5,max=5)
runApp('testing_functions/testing_app')
vbox_graphic()
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
check()
check()
check()
build_articles()
build_articles()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning=FALSE,
message=FALSE
)
devtools::load_all()
library(RShinyHelpers)
library(RShinyHelpers)
require(ggplot2)
require(dplyr)
# construct a time series
ts <-  as.Date("2022-01-03"):as.Date(Sys.Date())
#sample some dates of the original so its 'patchy'
ts <- sort(
as.Date(
ts[sample(c(TRUE,FALSE),size = 101,replace = TRUE,prob = c(0.7,0.3))],
origin='1970-01-01')
)
#generate a corresponding factor alongside
df <- data.frame(time=as.Date(ts),
col1=sample(replace=TRUE,letters[c(1:5)],size=length(ts)),
col2=sample(replace=TRUE,1:26,size=length(ts))
)
kableExtra::kable(head(df,10))
new_df <- complete_time_factors(df)
df%>%
dplyr::count(time,wt=col2)%>%
dplyr::mutate(n-lag(n,1))%>%head(10)
new_df%>%
dplyr::count(time,wt=col2)%>%
dplyr::mutate(n-lag(n,1))%>%head(10)
ggplot2::ggplot(df)+
ggplot2::geom_line(ggplot2::aes(time,col2,col=col1))+
ggplot2::facet_wrap(~col1)+
RShinyHelpers::custom_theme()
ggplot2::ggplot(new_df)+
ggplot2::geom_line(ggplot2::aes(time,col2,col=col1))+
ggplot2::facet_wrap(~col1)+
RShinyHelpers::custom_theme()
#devtools::load_all()
library(RShinyHelpers)
build_articles()
check()
check()
build_articles()
install()
build()
install()
install("/Users/aarongorman/Documents/docs/RShinyHelpers_0.0.0.9000.tar.gz")
getwd()
getwd("/Users/aarongorman/Documents/docs/RShinyHelpers")
install("/Users/aarongorman/Documents/docs/RShinyHelpers")
build_articles()
build_site()
