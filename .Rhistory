# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp('R/testing_app')
runApp('R/testing_app')
runApp('R/testing_app')
runApp('R/testing_app')
runApp('R/testing_app')
runApp('R/testing_app')
htmltools::HTML('.js-irs-0  .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {
background: green;
border-top: 1px solid green ;
border-bottom: 1px solid green ;}
/* changes the colour of the number tags */
.irs-from, .irs-to, .irs-single { background: green }')
runApp('R/testing_app')
tmltools::HTML(paste0('.js-irs-',slider_index,'  .irs-single, .js-irs-',slider_index,' .irs-bar-edge, .js-irs-0 .irs-bar {
background: ',colour,';
border-top: 1px solid ',colour,' ;
border-bottom: 1px solid ',colour,' ;}
/* changes the colour of the number tags */
.irs-from, .irs-to, .irs-single { background: ',colour,' }'))
htmltools::HTML(paste0('.js-irs-',slider_index,'  .irs-single, .js-irs-',slider_index,' .irs-bar-edge, .js-irs-0 .irs-bar {
background: ',colour,';
border-top: 1px solid ',colour,' ;
border-bottom: 1px solid ',colour,' ;}
/* changes the colour of the number tags */
.irs-from, .irs-to, .irs-single { background: ',colour,' }'))
slider_index=0
colour='meadiumseagreen'
htmltools::HTML(paste0('.js-irs-',slider_index,'  .irs-single, .js-irs-',slider_index,' .irs-bar-edge, .js-irs-0 .irs-bar {
background: ',colour,';
border-top: 1px solid ',colour,' ;
border-bottom: 1px solid ',colour,' ;}
/* changes the colour of the number tags */
.irs-from, .irs-to, .irs-single { background: ',colour,' }'))
runApp('R/testing_app')
ui <- fluidPage(theme = shinythemes::shinytheme(theme = 'simplex'),
bootstrap_slider_colour()
# shiny::tags$style(
#   htmltools::HTML(paste0('.js-irs-',slider_index,'  .irs-single, .js-irs-',slider_index,' .irs-bar-edge, .js-irs-0 .irs-bar {
#                                                 background: ',colour,';
#                                                 border-top: 1px solid ',colour,' ;
#                                                 border-bottom: 1px solid ',colour,' ;}
#
#                           /* changes the colour of the number tags */
#                          .irs-from, .irs-to, .irs-single { background: ',colour,' }'))),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('R/testing_app')
runApp('R/testing_app')
runApp('R/testing_app')
library(DT)
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
vbox <-
function(label = 'label',
textid = 'textOutput_here',
col = 'rgba(60,130,180,0.5)') {
shiny::tags$div(
style =
"border-radius: 15px;
border-style: solid;
border-color:white;
padding:0px;
margin:0px 10px;
color:white;
font-weight: 300;
text-color:blue;
text-align:center;
background-color:{col};
",
shiny::tags$h5(label, style = 'color:white;'),
shiny::tags$h2(style = 'font-weight:bold;display: inline-block;vertical-align:top;color:white;',
textid)
)
}
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
runApp('testing_functions/testing_app')
devtools::check()
rm(list = c("vbox"))
document()
library(devtools)
document()
devtools::check()
mPWCap(c('He1l0 ! '))
rmPWCap(c('He1l0 ! '))
rmPWCap(c('He1l0 ! '),rm_all_white_space = T)
rmPWCap(c('He1l0 ! klnsav'),rm_all_white_space = T)
rmPWCap(c('He1l0 ! W0rId'),rm_all_white_space = F)
rmPWCap(c('He1l0 ! W0rId'),rm_all_white_space = T)
runApp('testing_functions/testing_app')
use_rmarkdown_template()
use_readme_md()
use_readme_rmd()
build()
pkgdown::build_site()
nodes_tot=data.frame(col1=sample(c('A','B','C'),size = 50)
)
nodes_tot=data.frame(col1=sample(c('A','B','C'),size = 50,replace=T))
nodes_tot
#----
#example data
nodes_tot=data.frame(
col1=sample(c('A','B','C'),size = 50,replace=T)
col2=sample(c('1','2','3'),size = 50,replace=T))
#----
#example data
nodes_tot=data.frame(
col1=sample(c('A','B','C'),size = 50,replace=T),
col2=sample(c('1','2','3'),size = 50,replace=T))
nodes_tot%>%
#slice_head(n = 50)%>%
unite(1,2,col='FullName')%>%
group_by(1,2)
library(tidyverse)
nodes_tot%>%
#slice_head(n = 50)%>%
unite(1,2,col='FullName')%>%
group_by(1,2)
#----
#example data
nodes_tot=data.frame(
col1=sample(c('A','B','C'),size = 50,replace=T),
col2=sample(c('1','2','3'),size = 50,replace=T))
nodes_tot
nodes_tot%>%
#slice_head(n = 50)%>%
unite(1,2,col='FullName')%>%
group_by(1,2)
#---------
nodes_tot%>%
#slice_head(n = 50)%>%
unite(c(1,2),col='FullName')%>%
group_by(1,2)%>%
mutate(label=c(FullName))%>%
#mutate(label1=list(FullName))%>%
mutate(label2=paste(as.vector(label),sep=' ',collapse= '<br>' ))
#----
#example data
nodes_tot=data.frame(
FristName=sample(c('A','B','C'),size = 50,replace=T),
LastName=sample(c('1','2','3'),size = 50,replace=T))
nodes_tot%>%
#slice_head(n = 50)%>%
unite(FirstName,LastName,col='FullName')%>%
group_by(Latitude,Longitude)
#----
#example data
nodes_tot=data.frame(
FirstName=sample(c('A','B','C'),size = 50,replace=T),
LastName=sample(c('1','2','3'),size = 50,replace=T))
nodes_tot%>%
#slice_head(n = 50)%>%
unite(FirstName,LastName,col='FullName')%>%
group_by(Latitude,Longitude)
#----
#example data
nodes_tot=data.frame(
FirstName=sample(c('A','B','C'),size = 50,replace=T),
LastName=sample(c('1','2','3'),size = 50,replace=T),
Latitude=sample(c('D','E','F'),size = 50,replace=T),
Longitude=sample(c('4','5','6'),size = 50,replace=T))
nodes_tot%>%
#slice_head(n = 50)%>%
unite(FirstName,LastName,col='FullName')%>%
group_by(Latitude,Longitude)
nodes_tot%>%
#slice_head(n = 50)%>%
unite(FirstName,LastName,col='FullName')%>%
group_by(Latitude,Longitude)%>%
mutate(label=c(FullName))%>%
#mutate(label1=list(FullName))%>%
mutate(label2=paste(as.vector(label),sep=' ',collapse= '<br>' ))
#---------
nodes_tot%>%
#slice_head(n = 50)%>%
unite(FirstName,LastName,col='FullName')%>%
group_by(Latitude,Longitude)%>%
mutate(label=c(FullName))%>%
#mutate(label1=list(FullName))%>%
mutate(label2=paste(as.vector(label),sep=' ',collapse= '<br>' ))%>%View()
#useful for undirected graph applications. used in covid trnasimssion modelling
# to quantify the number of 'handshakes' and interactions,
#between people and between features of people.
#-------
#example data
edges_tot <- data.frame(
to=sample(c('A','B','C'),size = 50,replace=T),
from=sample(c('D','E','F'),size = 50,replace=T))
edges_tot
#useful for undirected graph applications. used in covid trnasimssion modelling
# to quantify the number of 'handshakes' and interactions,
#between people and between features of people.
#-------
#example data
edges_tot <- data.frame(
to=sample(c('A','B','C'),size = 50,replace=T),
from=sample(c('D','E','F'),size = 50,replace=T))
count(edge_tot,to,from)
count(edges_tot,to,from)
#useful for undirected graph applications. used in covid trnasimssion modelling
# to quantify the number of 'handshakes' and interactions,
#between people and between features of people.
#-------
#example data
edges_tot <- data.frame(
to=sample(c('A','B','C','D'),size = 50,replace=T),
from=sample(c('D','E','F'),size = 50,replace=T))
count(edges_tot,to,from)
#useful for undirected graph applications. used in covid trnasimssion modelling
# to quantify the number of 'handshakes' and interactions,
#between people and between features of people.
#-------
#example data
edges_tot <- data.frame(
to=sample(c('A','B','C','D'),size = 50,replace=T),
from=sample(c('A','B','C','D','E','F'),size = 50,replace=T))
count(edges_tot,to,from)
dges_tot %>%
rowwise()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))
dges_tot %>%
rowwise()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))
edges_tot %>%
rowwise()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))#%>%View
#-----
x <- edges_tot %>%
rowwise()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))#%>%View
map(x$to_from,sort)
map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()
map(x$to_from,sort)
map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()
map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()%>% #prep for transpose
t()
map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()%>% #prep for transpose
t()%>% class()
map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()%>% #prep for transpose
t()%>% #tranpose
as.data.frame()
y <-  map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()%>% #prep for transpose
t()%>% #tranpose
as.data.frame() #coerce back to data.frame- doesnt also preserve df
x
y
edges_tot %>%
group_by()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%unnest(to_from)
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%unnest_longer(to_from)
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%unnest_longer(to_from)%>%view()
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%mutate(id=1:nrow(.))%>%unnest_longer(to_from)%>%view()
edges_tot %>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%mutate(id=1:nrow(.))%>%unnest_longer(to_from)%>%view()
edges_tot %>%mutate(id=1:nrow(.))%>%
group_by(to,from)%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))%>%unnest_longer(to_from)%>%view()
#-----
x <- edges_tot %>%
#group_by(to,from)%>%
rowwise()%>%
#-----------
# important os that the selection is from each ROW and col
# and we are not grabbing the entire field
#------------
mutate(to_from=list(c(to,from)))#%>%View
y <-  map(x$to_from,sort)%>% #sort aphabetically
as.data.frame()%>% #prep for transpose
t()%>% #tranpose
as.data.frame() #coerce back to data.frame- doesnt also preserve df
y
names(y) <- c('to_ordered','from_ordered')
orderedxy <- cbind(x,y)%>%
rownames_to_column(var='rn')%>%
select(-rn)
orderedxy
orderedxy <- cbind(x,y)%>%
rownames_to_column(var='rn')%>%
select(-rn)
#we can then get the ordered fields and count them
orderedxy <- orderedxy%>%
group_by(to_ordered,from_ordered,label)%>%
add_count()%>%
filter(n>1)%>%
select(-c(n,to_ordered,from_ordered,to_from))
orderedxy <- cbind(x,y)%>%
rownames_to_column(var='rn')%>%
select(-rn)
#we can then get the ordered fields and count them
orderedxy <- orderedxy%>%
group_by(to_ordered,from_ordered)%>%#,label
add_count()%>%
filter(n>1)%>%
select(-c(n,to_ordered,from_ordered,to_from))
orderedxy
p <- ggplot(mtcars)+
geom_dotplot(aes(carb),)+theme_void()#col=NA,fill='white'
s <- sticker(subplot=p,spotlight = F,
package="RshinyHelpers",
s_x=1.0,
s_y=1.2,
s_width=1.2,
s_height=1.2,
p_color = 'white',
p_fontface = 'bold',
p_size=15,
p_y=1.3,
h_fill = 'lightblue',
h_color = 'steelblue',
url = 'https://github.com/aarong1/RshinyHelpers#readme',
h_size = 7,
white_around_sticker = T,
filename="inst/figures/baseplot.png")
s
# file creates the package logo
library(hexSticker)
p <- ggplot(mtcars)+
geom_dotplot(aes(carb),)+theme_void()#col=NA,fill='white'
s <- sticker(subplot=p,spotlight = F,
package="RshinyHelpers",
s_x=1.0,
s_y=1.2,
s_width=1.2,
s_height=1.2,
p_color = 'white',
p_fontface = 'bold',
p_size=15,
p_y=1.3,
h_fill = 'lightblue',
h_color = 'steelblue',
url = 'https://github.com/aarong1/RshinyHelpers#readme',
h_size = 7,
white_around_sticker = T,
filename="inst/figures/baseplot.png")
s
s
s <- sticker(subplot=p,spotlight = F,
package="RshinyHelpers",
s_x=1.0,
s_y=1.2,
s_width=1.2,
s_height=1.2,
p_color = 'white',
p_fontface = 'bold',
p_size=15,
p_y=1.3,
h_fill = 'lightblue',
h_color = 'steelblue',
url = 'https://github.com/aarong1/RshinyHelpers#readme',
h_size = 7,
white_around_sticker = T,
filename="inst/figures/logo.png")
use_logo("usethis.png")
use_logo("logo.png")
usethis::use_logo("logo.png")
usethis::use_logo("inst/figures/logo.png")
usethis::use_description()
pkgdown::build_site()
usethis::use_description()
pkgdown::build_site()
pkgdown::build_article()
devtools::check()
devtools::document()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_testthat()
document()
devtools::document()
devtools::check()
usethis::use_package(package = 'ggplot2')
usethis::use_package(package = 'tm')
usethis::use_package(package = 'htmltools')
usethis::use_package(package = 'shiny')
usethis::use_package(package = 'stringr')
devtools::check()
usethis::use_package('Rpack')
usethis::use_description()
check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
